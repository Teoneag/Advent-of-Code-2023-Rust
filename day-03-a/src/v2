fn main() {
    let input = include_str!("../input.txt");
    let matrix: Vec<Vec<char>> = input.lines().map(|line| line.chars().collect()).collect();

    let mut sum = 0;

    for (i, line) in matrix.iter().enumerate() {
        let mut nr = 0;
        let mut j_start = 0;

        for (j, &c) in line.iter().enumerate() {
            if c.is_digit(10) {
                if nr == 0 {
                    j_start = j;
                }
                nr = nr * 10 + c.to_digit(10).unwrap();

                if j != line.len() - 1 {
                    continue;
                }
            }

            if nr == 0 {
                continue;
            }

            let indices = vec![(i as i32, j_start as i32 - 1), (i as i32, j as i32)]
                .into_iter()
                .chain(
                    (j_start as i32 - 1..=j as i32)
                        .flat_map(|k| vec![(i as i32 - 1, k), (i as i32 + 1, k)]),
                )
                .filter(|&(i, j)| {
                    i >= 0 && j >= 0 && i < matrix.len() as i32 && j < matrix[0].len() as i32
                })
                .collect::<Vec<_>>();

            let ok = indices.iter().any(|&(i, j)| {
                let x = matrix[i as usize][j as usize];
                !x.is_digit(10) && x != '.'
            });

            if ok {
                sum += nr;
            }

            nr = 0;
        }
    }

    println!("{}", sum); // 539590
}
